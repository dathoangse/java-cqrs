/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/5.0/userguide/java_library_plugin.html
 */

plugins {
    // Apply the java-library plugin to add support for Java Library
    id 'java-library'
}

repositories {
    jcenter()
}

dependencies {
    compile project(':core')
    compile project(':simple-middlewares')
}

allprojects {
    apply plugin: 'jacoco'
    apply plugin: 'checkstyle'
    apply plugin: 'pmd'
    apply plugin: 'findbugs'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'

    checkstyle {
        toolVersion = '8.18'
        configFile = rootProject.file('config/checkstyle/checkstyle.xml')
        configProperties = [
                'checkstyle.cache.file': "${buildDir}/checkstyle.cache",
        ]
        ignoreFailures = false
        showViolations = true
    }

    tasks.withType(FindBugs) {
        reports {
            xml.enabled = false
            html.enabled = true
        }
        findbugsTest.enabled = false
    }
    tasks.withType(Pmd){
        reports{
            xml.enabled = true
            html.enabled = true
        }
        pmdTest.enabled = false
    }

    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xlint:unchecked"
            options.compilerArgs << "-Werror"
        }
    }

    task sourceJar(type: Jar) {
        classifier "sources"
        from sourceSets.main.allJava
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier "javadoc"
        from javadoc.destinationDir
    }

    artifacts {
        archives jar
        archives sourceJar
        archives javadocJar
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                customizePom(pom)
                groupId 'net.dathoang.cqrs.commandbus'
                version '0.1.1'

                from components.java

                artifact(sourceJar) {
                    classifier = 'sources'
                }
                artifact(javadocJar) {
                    classifier = 'javadoc'
                }

                // Create the sign pom artifact
                pom.withXml {
                    def pomFile = file("${project.buildDir}/generated-pom.xml")
                    writeTo(pomFile)
                    def pomAscFile = signing.sign(pomFile).signatureFiles[0]
                    artifact(pomAscFile) {
                        classifier = null
                        extension = 'pom.asc'
                    }
                }

                // Create the signed artifacts
                project.tasks.signArchives.signatureFiles.each {
                    artifact(it) {
                        def matcher = it.file =~ /-(sources|javadoc)\.jar\.asc$/
                        if (matcher.find()) {
                            classifier = matcher.group(1)
                        } else {
                            classifier = null
                        }
                        extension = 'jar.asc'
                    }
                }
            }
        }
        repositories {
            maven {
                url "https://oss.sonatype.org/service/local/staging/deploy/maven2"
                credentials {
                    username project.properties['CQRS_COMMANDBUS_SONATYPE_USERNAME']
                    password project.properties['CQRS_COMMANDBUS_SONATYPE_PASSWORD']
                }
            }
        }
    }

    model {
        tasks.generatePomFileForMavenJavaPublication {
            destination = file("$buildDir/generated-pom.xml")
        }

        tasks.publishMavenJavaPublicationToMavenLocal {
            dependsOn project.tasks.signArchives
        }
        tasks.publishMavenJavaPublicationToMavenRepository {
            dependsOn project.tasks.signArchives
        }
    }

    signing {
        sign configurations.archives
    }

    gradle.taskGraph.whenReady { taskGraph ->
        if (taskGraph.allTasks.any { it instanceof Sign }) {
            allprojects {
                ext."signing.keyId" = project.properties['CQRS_COMMANDBUS_SIGNING_KEY_ID']
                ext."signing.secretKeyRingFile" = project.properties['CQRS_COMMANDBUS_SECRET_KEYRING_FILE']
                ext."signing.password" = project.properties['CQRS_COMMANDBUS_SIGNING_PASSWORD']
            }
        }
    }
}

def customizePom(pom) {
    pom.withXml {
        def root = asNode()

        // Eliminate test-scoped dependencies (no need in maven central POMs)
        root.dependencies.removeAll { dep ->
            dep.scope == "test"
        }

        // Add all items necessary for maven central publication
        root.children().last() + {
            resolveStrategy = Closure.DELEGATE_FIRST

            description 'A lightweight & highly extensible CQRS Command Bus for implementing application layer or CQRS architectural pattern in Java'
            name 'Java CQRS CommandBus'
            url 'https://github.com/dathoangse/java-cqrs-commandbus'
            organization {
                name 'net.dathoang'
                url 'https://github.com/dathoangse'
            }
            issueManagement {
                system 'GitHub'
                url 'https://github.com/dathoangse/java-cqrs-commandbus/issues'
            }
            licenses {
                license {
                    name 'Apache License 2.0'
                    url 'https://github.com/dathoangse/java-cqrs-commandbus/blob/develop/LICENSE.txt'
                    distribution 'repo'
                }
            }
            scm {
                url 'https://github.com/dathoangse/java-cqrs-commandbus'
                connection 'scm:git:git://github.com/dathoangse/java-cqrs-commandbus.git'
                developerConnection 'scm:git:ssh://git@github.com:dathoangse/java-cqrs-commandbus.git'
            }
            developers {
                developer {
                    name 'Dat Hoang'
                }
            }
        }
    }
}