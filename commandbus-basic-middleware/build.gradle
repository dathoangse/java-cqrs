version 'unspecified'

apply plugin: 'java'

sourceCompatibility = 1.8

repositories {
    jcenter()
}

dependencies {
    implementation 'commons-logging:commons-logging:1.2'
    implementation project(':commandbus-core')
    implementation project(':commandbus-spec')

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.4.0'
    testImplementation 'org.assertj:assertj-core:3.11.1'
    testImplementation 'org.mockito:mockito-all:1.9.5'
    testImplementation("org.junit.jupiter:junit-jupiter-api:5.4.0")
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.4.0'
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.4.0")
}

test {
    useJUnitPlatform()
    failFast = false

    testLogging {
        events "passed", "skipped", "failed"
    }

    afterSuite { desc, result ->
        if (!desc.parent) {
            println "\nTest result: ${result.resultType}"
            println "Test summary: ${result.testCount} total tests run, " +
                    "${result.successfulTestCount} succeeded, " +
                    "${result.failedTestCount} failed, " +
                    "${result.skippedTestCount} skipped"
        }
    }
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled false
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId 'commandbus-basic-middleware'
        }
    }
}

// region Handle publishing
task sourceJar(type: Jar) {
    classifier "sources"
    from sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier "javadoc"
    from javadoc.destinationDir
}

artifacts {
    archives jar
    archives sourceJar
    archives javadocJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            customizePom(pom)
            groupId 'net.dathoang.cqrs.commandbus'
            version '0.2.0'
            if (project.properties['SNAPSHOT'] == 'true') {
                version (version + '-SNAPSHOT')
            }

            from components.java

            artifact(sourceJar) {
                classifier = 'sources'
            }
            artifact(javadocJar) {
                classifier = 'javadoc'
            }

            // Create the sign pom artifact
            pom.withXml {
                def pomFile = file("${project.buildDir}/generated-pom.xml")
                writeTo(pomFile)
                def pomAscFile = signing.sign(pomFile).signatureFiles[0]
                artifact(pomAscFile) {
                    classifier = null
                    extension = 'pom.asc'
                }
            }

            // Create the signed artifacts
            project.tasks.signArchives.signatureFiles.each {
                artifact(it) {
                    def matcher = it.file =~ /-(sources|javadoc)\.jar\.asc$/
                    if (matcher.find()) {
                        classifier = matcher.group(1)
                    } else {
                        classifier = null
                    }
                    extension = 'jar.asc'
                }
            }
        }
    }
    repositories {
        maven {
            if (project.properties['SNAPSHOT'] != 'true') {
                url "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            } else {
                url "https://oss.sonatype.org/content/repositories/snapshots"
            }
            credentials {
                username project.properties['CQRS_COMMANDBUS_SONATYPE_USERNAME']
                password project.properties['CQRS_COMMANDBUS_SONATYPE_PASSWORD']
            }
        }
    }
}

model {
    tasks.generatePomFileForMavenJavaPublication {
        destination = file("$buildDir/generated-pom.xml")
    }

    tasks.publishMavenJavaPublicationToMavenLocal {
        dependsOn project.tasks.signArchives
    }
    tasks.publishMavenJavaPublicationToMavenRepository {
        dependsOn project.tasks.signArchives
    }
}

signing {
    sign configurations.archives
}

gradle.taskGraph.whenReady { taskGraph ->
    if (taskGraph.allTasks.any { it instanceof Sign }) {
        allprojects {
            ext."signing.keyId" = project.properties['CQRS_COMMANDBUS_SIGNING_KEY_ID']
            ext."signing.secretKeyRingFile" = project.properties['CQRS_COMMANDBUS_SECRET_KEYRING_FILE']
            ext."signing.password" = project.properties['CQRS_COMMANDBUS_SIGNING_PASSWORD']
        }
    }
}
//endregion